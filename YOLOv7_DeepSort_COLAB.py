# -*- coding: utf-8 -*-
"""YOLOv7_DeepSort_COLAB.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1NPCT7-m_FAKAPWpB30KJCfuUektXf5I6

Ã‡alÄ±ÅŸma ortamÄ±mÄ±z iÃ§in gerekli projeyi Ã§ekelim.
"""

# Commented out IPython magic to ensure Python compatibility.
!git clone https://github.com/Azfe38/YOLOv7_DeepSort_COLAB
# %cd YOLOv7_DeepSort_COLAB

!wget https://github.com/WongKinYiu/yolov7/releases/download/v0.1/yolov7x.pt

from detection_helpers import *
from tracking_helpers import *
from bridge_wrapper import *
from PIL import Image

"""Hangi nesneleri tespit edeceÄŸimizi belirleyelim. """

detector = Detector(classes = None) # [person,horses,sports ball] olarak Ã¶zelleÅŸtirilebilir. class = None sÄ±nÄ±f ayÄ±rt etmez. TÃ¼m sÄ±nÄ±flar iÃ§in : "data/coco.yaml"
detector.load_model('./yolov7x.pt',) # pass the path to the trained weight file

"""Ã–rnek resim Ã¼zerinde YOLOv7x.pt modelinin doÄŸru yÃ¼klenip Ã§alÄ±ÅŸabildiÄŸini kontrol edelim."""

# Pass in any image path or Numpy Image using 'BGR' format
result = detector.detect('./IO_data/input/images/horses.jpg', plot_bb = True) # plot_bb = False output the predictions as [x,y,w,h, confidence, class]


if len(result.shape) == 3:# If it is image, convert it to proper image. detector will give "BGR" image
    result = Image.fromarray(cv2.cvtColor(result,cv2.COLOR_BGR2RGB)) 
    
result

"""DeepSort ile video Ã¼zerinde nesne takibi. """

# Initialise  class that binds detector and tracker in one class
tracker = YOLOv7_DeepSORT(reID_model_path="./deep_sort/model_weights/mars-small128.pb", detector=detector)

# output = None will not save the output video
tracker.track_video("./IO_data/input/videos/street.mp4", output="./IO_data/output/street.avi", show_live = False, skip_frames = 0, count_objects = True, verbose=1)

"""Video iÅŸlendi ancak Ã§Ä±ktÄ± .avi formatÄ±nda, videoyu bu sayfada gÃ¶sterebilmek iÃ§in .mp4 formatÄ±na dÃ¶nÃ¼ÅŸtÃ¼rmeliyiz. Bu nedenle ffmpeg-python ile video dÃ¶nÃ¼ÅŸtÃ¼rme yapacaÄŸÄ±z."""

!pip install ffmpeg-python

"""Konum ayarlamasÄ±"""

ls

cd IO_data/output/

ls

# Commented out IPython magic to ensure Python compatibility.
# convert resulting video from avi to mp4 file format
import os
path_video = os.path.join("output","street.avi")
# %cd IO_data/output
!ffmpeg -y -loglevel panic -i street.avi new_street.mp4
# %cd ..

# output object tracking video
path_output = os.path.join("output","new_street.mp4")

from IPython.display import HTML
from base64 import b64encode

ls

cd output/

mp4 = open('new_street.mp4','rb').read()
data_url = "data:video/mp4;base64," + b64encode(mp4).decode()
HTML("""<video width=900 controls><source src="%s" type="video/mp4"></video>""" % data_url)

"""Videoda baÅŸarÄ±lÄ± ÅŸekilde tespit ve takip yapÄ±ldÄ±.
Projeyi Google Drive Ã¼zerine yedekleyelim.
"""

from google.colab import drive
drive.mount('/content/drive')

"""Google Drive yedeklemesinden Ã¶nce zip haline getirmeliyiz."""

from google.colab import files
!zip -r /content/YOLOv7_DeepSort_COLAB.zip /content/YOLOv7_DeepSort_COLAB

"""Zip yapÄ±ldÄ±. Drive Ã¼zerine gÃ¶nderelim. Zip adÄ± ve Drive konumu Ã¶nemli!"""

import shutil
colab_link = "/content/YOLOv7_DeepSort_COLAB.zip"
gdrive_link = "/content/drive/MyDrive"
shutil.copy(colab_link, gdrive_link)

"""# Project successful!


```
    #  _     _
    #  \\ Î› //
    #  ||(|)||
    #  \\\|///
    #   \\|//
    #    \|/ 
    #     |  /
    #   \ | /
    #    \|/
    #     |
    #     |
    #     |
    #     |
    #     |
    #     |

```

Yeni videolar
"""

ls

cd ..

cd ..

# Initialise  class that binds detector and tracker in one class
tracker = YOLOv7_DeepSORT(reID_model_path="./deep_sort/model_weights/mars-small128.pb", detector=detector)

# output = None will not save the output video
tracker.track_video("./IO_data/input/videos/cars.mp4", output="./IO_data/output/new_cars.avi", show_live = False, skip_frames = 0, count_objects = True, verbose=1)

# Initialise  class that binds detector and tracker in one class
tracker = YOLOv7_DeepSORT(reID_model_path="./deep_sort/model_weights/mars-small128.pb", detector=detector)

# output = None will not save the output video
tracker.track_video("./IO_data/input/videos/highway.mp4", output="./IO_data/output/new_highway.avi", show_live = False, skip_frames = 0, count_objects = True, verbose=1)

# Initialise  class that binds detector and tracker in one class
tracker = YOLOv7_DeepSORT(reID_model_path="./deep_sort/model_weights/mars-small128.pb", detector=detector)

# output = None will not save the output video
tracker.track_video("./IO_data/input/videos/intersection.mp4", output="./IO_data/output/new_intersection.avi", show_live = False, skip_frames = 0, count_objects = True, verbose=1)

# Initialise  class that binds detector and tracker in one class
tracker = YOLOv7_DeepSORT(reID_model_path="./deep_sort/model_weights/mars-small128.pb", detector=detector)

# output = None will not save the output video
tracker.track_video("./IO_data/input/videos/road.mp4", output="./IO_data/output/new_road.avi", show_live = False, skip_frames = 0, count_objects = True, verbose=1)

# Initialise  class that binds detector and tracker in one class
tracker = YOLOv7_DeepSORT(reID_model_path="./deep_sort/model_weights/mars-small128.pb", detector=detector)

# output = None will not save the output video
tracker.track_video("./IO_data/input/videos/way.mp4", output="./IO_data/output/new_way.avi", show_live = False, skip_frames = 0, count_objects = True, verbose=1)

ls

cd  IO_data/output/

# Commented out IPython magic to ensure Python compatibility.
# convert resulting video from avi to mp4 file format
import os
path_video = os.path.join("output","new_cars.avi")
# %cd IO_data/output
!ffmpeg -y -loglevel panic -i new_cars.avi new_cars.mp4
# %cd ..

# output object tracking video
path_output = os.path.join("output","new_cars.mp4")

ls

cd output/

# Commented out IPython magic to ensure Python compatibility.
# convert resulting video from avi to mp4 file format
import os
path_video = os.path.join("output","new_highway.avi")
# %cd IO_data/output
!ffmpeg -y -loglevel panic -i new_highway.avi new_highway.mp4
# %cd ..

# output object tracking video
path_output = os.path.join("output","new_highway.mp4")

ls

cd output/

# Commented out IPython magic to ensure Python compatibility.
# convert resulting video from avi to mp4 file format
import os
path_video = os.path.join("output","new_intersection.avi")
# %cd IO_data/output
!ffmpeg -y -loglevel panic -i new_intersection.avi new_intersection.mp4
# %cd ..

# output object tracking video
path_output = os.path.join("output","new_intersection.mp4")

ls

cd output/

# Commented out IPython magic to ensure Python compatibility.
# convert resulting video from avi to mp4 file format
import os
path_video = os.path.join("output","new_road.avi")
# %cd IO_data/output
!ffmpeg -y -loglevel panic -i new_road.avi new_road.mp4
# %cd ..

# output object tracking video
path_output = os.path.join("output","new_road.mp4")

ls

cd output/

# Commented out IPython magic to ensure Python compatibility.
# convert resulting video from avi to mp4 file format
import os
path_video = os.path.join("output","new_way.avi")
# %cd IO_data/output
!ffmpeg -y -loglevel panic -i new_way.avi new_way.mp4
# %cd ..

# output object tracking video
path_output = os.path.join("output","new_way.mp4")

ls

cd output/

mp4 = open('new_cars.mp4','rb').read()
data_url = "data:video/mp4;base64," + b64encode(mp4).decode()
HTML("""<video width=1024 controls><source src="%s" type="video/mp4"></video>""" % data_url)

ls

mp4 = open('new_highway.mp4','rb').read()
data_url = "data:video/mp4;base64," + b64encode(mp4).decode()
HTML("""<video width=1024 controls><source src="%s" type="video/mp4"></video>""" % data_url)

mp4 = open('new_intersection.mp4','rb').read()
data_url = "data:video/mp4;base64," + b64encode(mp4).decode()
HTML("""<video width=1024 controls><source src="%s" type="video/mp4"></video>""" % data_url)

mp4 = open('new_road.mp4','rb').read()
data_url = "data:video/mp4;base64," + b64encode(mp4).decode()
HTML("""<video width=1024 controls><source src="%s" type="video/mp4"></video>""" % data_url)

mp4 = open('new_way.mp4','rb').read()
data_url = "data:video/mp4;base64," + b64encode(mp4).decode()
HTML("""<video width=1024 controls><source src="%s" type="video/mp4"></video>""" % data_url)

"""# Project successful!


```
    #  _     _
    #  \\ Î› //
    #  ||(|)||
    #  \\\|///
    #   \\|//
    #    \|/ 
    #     |  /
    #   \ | /
    #    \|/
    #     |
    #     |
    #     |
    #     |
    #     |
    #     |

```

Projeyi Zip haline getireceÄŸiz ve Google Drive Ã¼zerinde yedekliyeceÄŸiz.
"""

from google.colab import files
!zip -r /content/YOLOv7_DeepSort_COLAB.zip /content/YOLOv7_DeepSort_COLAB

import shutil
colab_link = "/content/YOLOv7_DeepSort_COLAB.zip"
gdrive_link = "/content/drive/MyDrive"
shutil.copy(colab_link, gdrive_link)

"""ðŸ˜€ Finish"""